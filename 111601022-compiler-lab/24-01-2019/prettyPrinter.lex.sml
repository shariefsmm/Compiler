(*#line 30.10 "prettyPrinter.lex"*)functor PrettyPrinterLexFun(structure Tokens : PrettyPrinter_TOKENS)(*#line 1.1 "prettyPrinter.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "prettyPrinter.lex"*)(* User declarations *)

val prevLineNum = ref 0;
val lineNum = ref 1;
val prevCharNum = ref 0;
val charNum = ref 1;
val inString = ref 0;
val commentCnt = ref 0;
val str = ref "";
val stringPos = ref 0;
val stringLine = ref 0;
val commentPos = ref 0;
val commentLine = ref 0;

type arg = string;
type pos = int;
type svalue = Tokens.svalue;
type ('a, 'b) token = ('a, 'b) Tokens.token;
type lexresult = (svalue, pos) token;

fun eof fileName = Tokens.EOF (!lineNum, !charNum);

fun error_msg str = TextIO.print ("Illegal token \"" ^ str ^ "\" found in line " ^ 
                                  (Int.toString (!prevLineNum)) ^ " at position " ^ Int.toString (!prevCharNum) ^
                                  "\n");


(*#line 33.1 "prettyPrinter.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\009\009\009\009\009\009\009\009\009\094\096\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\094\009\093\009\009\009\092\009\091\090\089\088\087\086\085\083\
\\081\081\081\081\081\081\081\081\081\081\079\078\075\074\072\009\
\\009\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\071\009\070\009\009\
\\009\065\060\013\058\052\042\013\013\039\013\013\036\013\033\031\
\\013\013\013\013\023\013\020\015\013\013\013\012\011\010\009\009\
\\009"
),
 (3, 
"\097\097\097\097\097\097\097\097\097\097\103\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\101\097\097\097\097\099\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\097\
\\097"
),
 (5, 
"\104\104\104\104\104\104\104\104\104\104\000\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\113\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\106\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104"
),
 (7, 
"\009\009\009\009\009\009\009\009\009\115\118\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\115\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\114\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\016\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\017\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\018\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\019\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\021\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\022\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\028\014\014\014\014\014\014\027\
\\014\014\014\014\014\014\014\014\014\024\014\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\025\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\026\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\029\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\030\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\032\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\034\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\035\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\037\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\038\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\041\014\014\014\014\014\014\014\040\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\050\
\\014\014\014\014\014\043\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\044\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\045\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\046\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\047\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\048\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\049\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\051\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\055\014\053\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\054\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\056\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\057\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\059\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\061\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\062\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\063\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\064\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\066\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\067\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\068\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\014\014\000\000\000\000\014\
\\000\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\
\\014\014\014\014\014\014\014\014\014\069\014\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\077\076\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\082\082\082\082\082\082\082\082\082\082\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\095\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\095\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (97, 
"\098\098\098\098\098\098\098\098\098\098\000\098\098\098\098\098\
\\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\
\\098\098\098\098\098\098\098\098\098\098\000\098\098\098\098\000\
\\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\
\\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\
\\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\
\\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\
\\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\098\
\\098"
),
 (99, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (101, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\102\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (104, 
"\105\105\105\105\105\105\105\105\105\105\000\105\105\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105\105\000\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\000\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105"
),
 (106, 
"\000\000\000\000\000\000\000\000\000\111\112\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\111\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\109\109\109\109\109\109\109\109\109\109\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\107\000\108\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\\000\000\000\000\107\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (108, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\000\000\000\000\000\
\\000\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\000\000\000\000\000\
\\000"
),
 (109, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\110\110\110\110\110\110\110\110\110\110\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (110, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\107\107\107\107\107\107\107\107\107\107\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (111, 
"\000\000\000\000\000\000\000\000\000\111\112\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (115, 
"\000\000\000\000\000\000\000\000\000\117\118\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\117\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\116\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [], trans = 7},
{fin = [], trans = 7},
{fin = [(N 183)], trans = 0},
{fin = [(N 145),(N 183)], trans = 0},
{fin = [(N 175),(N 183)], trans = 0},
{fin = [(N 143),(N 183)], trans = 0},
{fin = [(N 181),(N 183)], trans = 13},
{fin = [(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 15},
{fin = [(N 181)], trans = 16},
{fin = [(N 181)], trans = 17},
{fin = [(N 181)], trans = 18},
{fin = [(N 125),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 20},
{fin = [(N 181)], trans = 21},
{fin = [(N 119),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 23},
{fin = [(N 181)], trans = 24},
{fin = [(N 181)], trans = 25},
{fin = [(N 115),(N 181)], trans = 13},
{fin = [(N 110),(N 181)], trans = 13},
{fin = [(N 181)], trans = 28},
{fin = [(N 181)], trans = 29},
{fin = [(N 107),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 31},
{fin = [(N 102),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 33},
{fin = [(N 181)], trans = 34},
{fin = [(N 99),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 36},
{fin = [(N 181)], trans = 37},
{fin = [(N 95),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 39},
{fin = [(N 91),(N 181)], trans = 13},
{fin = [(N 88),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 42},
{fin = [(N 181)], trans = 43},
{fin = [(N 181)], trans = 44},
{fin = [(N 181)], trans = 45},
{fin = [(N 181)], trans = 46},
{fin = [(N 181)], trans = 47},
{fin = [(N 181)], trans = 48},
{fin = [(N 85),(N 181)], trans = 13},
{fin = [(N 181)], trans = 50},
{fin = [(N 76),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 52},
{fin = [(N 181)], trans = 53},
{fin = [(N 72),(N 181)], trans = 13},
{fin = [(N 181)], trans = 55},
{fin = [(N 181)], trans = 56},
{fin = [(N 68),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 58},
{fin = [(N 63),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 60},
{fin = [(N 181)], trans = 61},
{fin = [(N 181)], trans = 62},
{fin = [(N 181)], trans = 63},
{fin = [(N 60),(N 181)], trans = 13},
{fin = [(N 181),(N 183)], trans = 65},
{fin = [(N 181)], trans = 66},
{fin = [(N 181)], trans = 67},
{fin = [(N 181)], trans = 68},
{fin = [(N 54),(N 181)], trans = 13},
{fin = [(N 149),(N 183)], trans = 0},
{fin = [(N 147),(N 183)], trans = 0},
{fin = [(N 171),(N 183)], trans = 72},
{fin = [(N 134)], trans = 0},
{fin = [(N 163),(N 183)], trans = 0},
{fin = [(N 169),(N 183)], trans = 75},
{fin = [(N 128)], trans = 0},
{fin = [(N 131)], trans = 0},
{fin = [(N 153),(N 183)], trans = 0},
{fin = [(N 151),(N 183)], trans = 79},
{fin = [(N 137)], trans = 0},
{fin = [(N 178),(N 183)], trans = 81},
{fin = [(N 178)], trans = 81},
{fin = [(N 167),(N 183)], trans = 83},
{fin = [(N 7)], trans = 0},
{fin = [(N 155),(N 183)], trans = 0},
{fin = [(N 161),(N 183)], trans = 0},
{fin = [(N 157),(N 183)], trans = 0},
{fin = [(N 159),(N 183)], trans = 0},
{fin = [(N 165),(N 183)], trans = 0},
{fin = [(N 141),(N 183)], trans = 0},
{fin = [(N 139),(N 183)], trans = 0},
{fin = [(N 173),(N 183)], trans = 0},
{fin = [(N 22),(N 183)], trans = 0},
{fin = [(N 4),(N 183)], trans = 94},
{fin = [(N 4)], trans = 94},
{fin = [(N 1)], trans = 0},
{fin = [(N 20),(N 183)], trans = 97},
{fin = [(N 20)], trans = 97},
{fin = [(N 17),(N 183)], trans = 99},
{fin = [(N 10)], trans = 0},
{fin = [(N 17),(N 183)], trans = 101},
{fin = [(N 13)], trans = 0},
{fin = [(N 15)], trans = 0},
{fin = [(N 25),(N 183)], trans = 104},
{fin = [(N 25)], trans = 104},
{fin = [(N 183)], trans = 106},
{fin = [(N 36)], trans = 0},
{fin = [], trans = 108},
{fin = [], trans = 109},
{fin = [], trans = 110},
{fin = [], trans = 111},
{fin = [(N 40)], trans = 0},
{fin = [(N 48),(N 183)], trans = 0},
{fin = [(N 46),(N 183)], trans = 0},
{fin = [(N 183)], trans = 115},
{fin = [(N 46)], trans = 0},
{fin = [], trans = 115},
{fin = [(N 43)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val MULTILINE_STRING = STARTSTATE 7;
val STRING = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ((*#line 31.7 "prettyPrinter.lex"*)fileName:string(*#line 861.1 "prettyPrinter.lex.sml"*)
)) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => ((*#line 41.52 "prettyPrinter.lex"*) prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    continue () (*#line 881.1 "prettyPrinter.lex.sml"*)
)
| 10 => let val yytext=yymktext() in (*#line 57.52 "prettyPrinter.lex"*) commentCnt := !commentCnt + 1;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 887.1 "prettyPrinter.lex.sml"*)
 end
| 102 => let val yytext=yymktext() in (*#line 166.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.OF (!lineNum, !prevCharNum) (*#line 892.1 "prettyPrinter.lex.sml"*)
 end
| 107 => let val yytext=yymktext() in (*#line 170.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.THEN (!lineNum, !prevCharNum) (*#line 897.1 "prettyPrinter.lex.sml"*)
 end
| 110 => let val yytext=yymktext() in (*#line 174.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.TO (!lineNum, !prevCharNum) (*#line 902.1 "prettyPrinter.lex.sml"*)
 end
| 115 => let val yytext=yymktext() in (*#line 178.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.TYPE (!lineNum, !prevCharNum) (*#line 907.1 "prettyPrinter.lex.sml"*)
 end
| 119 => let val yytext=yymktext() in (*#line 182.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.VAR (!lineNum, !prevCharNum) (*#line 912.1 "prettyPrinter.lex.sml"*)
 end
| 125 => let val yytext=yymktext() in (*#line 186.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.WHILE (!lineNum, !prevCharNum) (*#line 917.1 "prettyPrinter.lex.sml"*)
 end
| 128 => let val yytext=yymktext() in (*#line 190.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.NOTEQUAL (!lineNum, !prevCharNum) (*#line 922.1 "prettyPrinter.lex.sml"*)
 end
| 13 => let val yytext=yymktext() in (*#line 62.52 "prettyPrinter.lex"*) commentCnt := !commentCnt - 1;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    if (!commentCnt) = 0 then ( YYBEGIN INITIAL;
                                                                                Tokens.COMMENT (!str, !commentLine, !commentPos))
                                                                         else ( continue () ) (*#line 929.1 "prettyPrinter.lex.sml"*)
 end
| 131 => let val yytext=yymktext() in (*#line 194.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LESSEQUAL (!lineNum, !prevCharNum) (*#line 934.1 "prettyPrinter.lex.sml"*)
 end
| 134 => let val yytext=yymktext() in (*#line 198.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.GREATEREQUAL (!lineNum, !prevCharNum) (*#line 939.1 "prettyPrinter.lex.sml"*)
 end
| 137 => let val yytext=yymktext() in (*#line 202.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ASSIGN (!lineNum, !prevCharNum) (*#line 944.1 "prettyPrinter.lex.sml"*)
 end
| 139 => let val yytext=yymktext() in (*#line 206.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LPAREN (!lineNum, !prevCharNum) (*#line 949.1 "prettyPrinter.lex.sml"*)
 end
| 141 => let val yytext=yymktext() in (*#line 210.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.RPAREN (!lineNum, !prevCharNum) (*#line 954.1 "prettyPrinter.lex.sml"*)
 end
| 143 => let val yytext=yymktext() in (*#line 214.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LBRACES (!lineNum, !prevCharNum) (*#line 959.1 "prettyPrinter.lex.sml"*)
 end
| 145 => let val yytext=yymktext() in (*#line 218.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.RBRACES (!lineNum, !prevCharNum) (*#line 964.1 "prettyPrinter.lex.sml"*)
 end
| 147 => let val yytext=yymktext() in (*#line 222.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LBRACKETS (!lineNum, !prevCharNum) (*#line 969.1 "prettyPrinter.lex.sml"*)
 end
| 149 => let val yytext=yymktext() in (*#line 226.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.RBRACKETS (!lineNum, !prevCharNum) (*#line 974.1 "prettyPrinter.lex.sml"*)
 end
| 15 => let val yytext=yymktext() in (*#line 68.52 "prettyPrinter.lex"*) prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 981.1 "prettyPrinter.lex.sml"*)
 end
| 151 => let val yytext=yymktext() in (*#line 230.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COLON (!lineNum, !prevCharNum) (*#line 986.1 "prettyPrinter.lex.sml"*)
 end
| 153 => let val yytext=yymktext() in (*#line 234.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.SEMICOLON (!lineNum, !prevCharNum) (*#line 991.1 "prettyPrinter.lex.sml"*)
 end
| 155 => let val yytext=yymktext() in (*#line 238.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.DOT (!lineNum, !prevCharNum) (*#line 996.1 "prettyPrinter.lex.sml"*)
 end
| 157 => let val yytext=yymktext() in (*#line 242.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMA (!lineNum, !prevCharNum) (*#line 1001.1 "prettyPrinter.lex.sml"*)
 end
| 159 => let val yytext=yymktext() in (*#line 246.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.PLUS (!lineNum, !prevCharNum) (*#line 1006.1 "prettyPrinter.lex.sml"*)
 end
| 161 => let val yytext=yymktext() in (*#line 250.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.MINUS (!lineNum, !prevCharNum) (*#line 1011.1 "prettyPrinter.lex.sml"*)
 end
| 163 => let val yytext=yymktext() in (*#line 254.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.EQUALS (!lineNum, !prevCharNum) (*#line 1016.1 "prettyPrinter.lex.sml"*)
 end
| 165 => let val yytext=yymktext() in (*#line 258.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.MULTIPLY (!lineNum, !prevCharNum) (*#line 1021.1 "prettyPrinter.lex.sml"*)
 end
| 167 => let val yytext=yymktext() in (*#line 262.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.DIVIDE (!lineNum, !prevCharNum) (*#line 1026.1 "prettyPrinter.lex.sml"*)
 end
| 169 => let val yytext=yymktext() in (*#line 266.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LESS (!lineNum, !prevCharNum) (*#line 1031.1 "prettyPrinter.lex.sml"*)
 end
| 17 => let val yytext=yymktext() in (*#line 74.52 "prettyPrinter.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1036.1 "prettyPrinter.lex.sml"*)
 end
| 171 => let val yytext=yymktext() in (*#line 270.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.GREATER (!lineNum, !prevCharNum) (*#line 1041.1 "prettyPrinter.lex.sml"*)
 end
| 173 => let val yytext=yymktext() in (*#line 274.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.AND (!lineNum, !prevCharNum) (*#line 1046.1 "prettyPrinter.lex.sml"*)
 end
| 175 => let val yytext=yymktext() in (*#line 278.51 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.OR (!lineNum, !prevCharNum) (*#line 1051.1 "prettyPrinter.lex.sml"*)
 end
| 178 => let val yytext=yymktext() in (*#line 282.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.INTEGER (valOf (Int.fromString yytext), !lineNum, !prevCharNum) (*#line 1056.1 "prettyPrinter.lex.sml"*)
 end
| 181 => let val yytext=yymktext() in (*#line 286.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ID (yytext, !lineNum, !prevCharNum) (*#line 1061.1 "prettyPrinter.lex.sml"*)
 end
| 183 => let val yytext=yymktext() in (*#line 290.52 "prettyPrinter.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    error_msg yytext; 
                                                    continue () (*#line 1066.1 "prettyPrinter.lex.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 78.52 "prettyPrinter.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1071.1 "prettyPrinter.lex.sml"*)
 end
| 22 => let val yytext=yymktext() in (*#line 82.52 "prettyPrinter.lex"*) YYBEGIN STRING;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    stringPos := !prevCharNum;
                                                    stringLine := !lineNum;
                                                    str := yytext;
                                                    continue () (*#line 1079.1 "prettyPrinter.lex.sml"*)
 end
| 25 => let val yytext=yymktext() in (*#line 89.52 "prettyPrinter.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1084.1 "prettyPrinter.lex.sml"*)
 end
| 36 => let val yytext=yymktext() in (*#line 94.52 "prettyPrinter.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1089.1 "prettyPrinter.lex.sml"*)
 end
| 4 => let val yytext=yymktext() in (*#line 46.52 "prettyPrinter.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    continue () (*#line 1093.1 "prettyPrinter.lex.sml"*)
 end
| 40 => let val yytext=yymktext() in (*#line 98.52 "prettyPrinter.lex"*) YYBEGIN MULTILINE_STRING;
                                                    prevLineNum := !lineNum;
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1101.1 "prettyPrinter.lex.sml"*)
 end
| 43 => let val yytext=yymktext() in (*#line 105.52 "prettyPrinter.lex"*) prevLineNum := !lineNum;
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1108.1 "prettyPrinter.lex.sml"*)
 end
| 46 => let val yytext=yymktext() in (*#line 111.52 "prettyPrinter.lex"*) YYBEGIN STRING;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    continue () (*#line 1114.1 "prettyPrinter.lex.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 116.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    inString := 0;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    str := !str ^ yytext;
                                                    Tokens.STRING (!str, !stringLine, !stringPos) (*#line 1121.1 "prettyPrinter.lex.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 122.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ARRAY (!lineNum, !prevCharNum) (*#line 1126.1 "prettyPrinter.lex.sml"*)
 end
| 60 => let val yytext=yymktext() in (*#line 126.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.BREAK (!lineNum, !prevCharNum) (*#line 1131.1 "prettyPrinter.lex.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 130.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.DO (!lineNum, !prevCharNum) (*#line 1136.1 "prettyPrinter.lex.sml"*)
 end
| 68 => let val yytext=yymktext() in (*#line 134.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ELSE (!lineNum, !prevCharNum) (*#line 1141.1 "prettyPrinter.lex.sml"*)
 end
| 7 => let val yytext=yymktext() in (*#line 49.52 "prettyPrinter.lex"*) YYBEGIN COMMENT;
                                                    commentCnt := !commentCnt + 1;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    commentPos := !prevCharNum;
                                                    commentLine := !lineNum;
                                                    str := yytext;
                                                    continue () (*#line 1150.1 "prettyPrinter.lex.sml"*)
 end
| 72 => let val yytext=yymktext() in (*#line 138.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.END (!lineNum, !prevCharNum) (*#line 1155.1 "prettyPrinter.lex.sml"*)
 end
| 76 => let val yytext=yymktext() in (*#line 142.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.FOR (!lineNum, !prevCharNum) (*#line 1160.1 "prettyPrinter.lex.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 146.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.FUNCTION (!lineNum, !prevCharNum) (*#line 1165.1 "prettyPrinter.lex.sml"*)
 end
| 88 => let val yytext=yymktext() in (*#line 150.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.IF (!lineNum, !prevCharNum) (*#line 1170.1 "prettyPrinter.lex.sml"*)
 end
| 91 => let val yytext=yymktext() in (*#line 154.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.IN (!lineNum, !prevCharNum) (*#line 1175.1 "prettyPrinter.lex.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 158.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.LET (!lineNum, !prevCharNum) (*#line 1180.1 "prettyPrinter.lex.sml"*)
 end
| 99 => let val yytext=yymktext() in (*#line 162.52 "prettyPrinter.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.NIL (!lineNum, !prevCharNum) (*#line 1185.1 "prettyPrinter.lex.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
